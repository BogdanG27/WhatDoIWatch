/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestResponse,
  TvShowAddDTO,
  TvShowDTOPagedResponseRequestResponse,
  TvShowDTORequestResponse,
  TvShowUpdateDTO,
} from '../models';
import {
    RequestResponseFromJSON,
    RequestResponseToJSON,
    TvShowAddDTOFromJSON,
    TvShowAddDTOToJSON,
    TvShowDTOPagedResponseRequestResponseFromJSON,
    TvShowDTOPagedResponseRequestResponseToJSON,
    TvShowDTORequestResponseFromJSON,
    TvShowDTORequestResponseToJSON,
    TvShowUpdateDTOFromJSON,
    TvShowUpdateDTOToJSON,
} from '../models';

export interface ApiTvShowAddPostRequest {
    tvShowAddDTO?: TvShowAddDTO;
}

export interface ApiTvShowDeleteIdDeleteRequest {
    id: string;
}

export interface ApiTvShowGetByIdIdGetRequest {
    id: string;
}

export interface ApiTvShowGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiTvShowUpdatePutRequest {
    tvShowUpdateDTO?: TvShowUpdateDTO;
}

/**
 * 
 */
export class TvShowApi extends runtime.BaseAPI {

    /**
     */
    async apiTvShowAddPostRaw(requestParameters: ApiTvShowAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TvShow/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TvShowAddDTOToJSON(requestParameters.tvShowAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTvShowAddPost(requestParameters: ApiTvShowAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiTvShowAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTvShowDeleteIdDeleteRaw(requestParameters: ApiTvShowDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTvShowDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TvShow/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTvShowDeleteIdDelete(requestParameters: ApiTvShowDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiTvShowDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTvShowGetByIdIdGetRaw(requestParameters: ApiTvShowGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TvShowDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTvShowGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TvShow/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TvShowDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTvShowGetByIdIdGet(requestParameters: ApiTvShowGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TvShowDTORequestResponse> {
        const response = await this.apiTvShowGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTvShowGetPageGetRaw(requestParameters: ApiTvShowGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TvShowDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TvShow/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TvShowDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTvShowGetPageGet(requestParameters: ApiTvShowGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TvShowDTOPagedResponseRequestResponse> {
        const response = await this.apiTvShowGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTvShowUpdatePutRaw(requestParameters: ApiTvShowUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TvShow/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TvShowUpdateDTOToJSON(requestParameters.tvShowUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTvShowUpdatePut(requestParameters: ApiTvShowUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiTvShowUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
