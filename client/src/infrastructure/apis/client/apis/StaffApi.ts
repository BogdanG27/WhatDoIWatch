/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestResponse,
  StaffAddDTO,
  StaffDTOPagedResponseRequestResponse,
  StaffDTORequestResponse,
  StaffUpdateDTO,
} from '../models';
import {
    RequestResponseFromJSON,
    RequestResponseToJSON,
    StaffAddDTOFromJSON,
    StaffAddDTOToJSON,
    StaffDTOPagedResponseRequestResponseFromJSON,
    StaffDTOPagedResponseRequestResponseToJSON,
    StaffDTORequestResponseFromJSON,
    StaffDTORequestResponseToJSON,
    StaffUpdateDTOFromJSON,
    StaffUpdateDTOToJSON,
} from '../models';

export interface ApiStaffAddPostRequest {
    staffAddDTO?: StaffAddDTO;
}

export interface ApiStaffDeleteIdDeleteRequest {
    id: string;
}

export interface ApiStaffGetByIdIdGetRequest {
    id: string;
}

export interface ApiStaffGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiStaffUpdatePutRequest {
    staffUpdateDTO?: StaffUpdateDTO;
}

/**
 * 
 */
export class StaffApi extends runtime.BaseAPI {

    /**
     */
    async apiStaffAddPostRaw(requestParameters: ApiStaffAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Staff/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StaffAddDTOToJSON(requestParameters.staffAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStaffAddPost(requestParameters: ApiStaffAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiStaffAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStaffDeleteIdDeleteRaw(requestParameters: ApiStaffDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiStaffDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Staff/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStaffDeleteIdDelete(requestParameters: ApiStaffDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiStaffDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStaffGetByIdIdGetRaw(requestParameters: ApiStaffGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaffDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiStaffGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Staff/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStaffGetByIdIdGet(requestParameters: ApiStaffGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaffDTORequestResponse> {
        const response = await this.apiStaffGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStaffGetPageGetRaw(requestParameters: ApiStaffGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaffDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Staff/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStaffGetPageGet(requestParameters: ApiStaffGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaffDTOPagedResponseRequestResponse> {
        const response = await this.apiStaffGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStaffUpdatePutRaw(requestParameters: ApiStaffUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Staff/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StaffUpdateDTOToJSON(requestParameters.staffUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStaffUpdatePut(requestParameters: ApiStaffUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiStaffUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
