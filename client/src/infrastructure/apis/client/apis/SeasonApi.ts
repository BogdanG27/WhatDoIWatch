/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestResponse,
  SeasonAddDTO,
  SeasonDTOPagedResponseRequestResponse,
  SeasonDTORequestResponse,
  SeasonUpdateDTO,
} from '../models';
import {
    RequestResponseFromJSON,
    RequestResponseToJSON,
    SeasonAddDTOFromJSON,
    SeasonAddDTOToJSON,
    SeasonDTOPagedResponseRequestResponseFromJSON,
    SeasonDTOPagedResponseRequestResponseToJSON,
    SeasonDTORequestResponseFromJSON,
    SeasonDTORequestResponseToJSON,
    SeasonUpdateDTOFromJSON,
    SeasonUpdateDTOToJSON,
} from '../models';

export interface ApiSeasonAddPostRequest {
    seasonAddDTO?: SeasonAddDTO;
}

export interface ApiSeasonDeleteIdDeleteRequest {
    id: string;
}

export interface ApiSeasonGetByIdIdGetRequest {
    id: string;
}

export interface ApiSeasonGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiSeasonUpdatePutRequest {
    seasonUpdateDTO?: SeasonUpdateDTO;
}

/**
 * 
 */
export class SeasonApi extends runtime.BaseAPI {

    /**
     */
    async apiSeasonAddPostRaw(requestParameters: ApiSeasonAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Season/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeasonAddDTOToJSON(requestParameters.seasonAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSeasonAddPost(requestParameters: ApiSeasonAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiSeasonAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSeasonDeleteIdDeleteRaw(requestParameters: ApiSeasonDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiSeasonDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Season/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSeasonDeleteIdDelete(requestParameters: ApiSeasonDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiSeasonDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSeasonGetByIdIdGetRaw(requestParameters: ApiSeasonGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeasonDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiSeasonGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Season/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSeasonGetByIdIdGet(requestParameters: ApiSeasonGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeasonDTORequestResponse> {
        const response = await this.apiSeasonGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSeasonGetPageGetRaw(requestParameters: ApiSeasonGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeasonDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Season/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeasonDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSeasonGetPageGet(requestParameters: ApiSeasonGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeasonDTOPagedResponseRequestResponse> {
        const response = await this.apiSeasonGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSeasonUpdatePutRaw(requestParameters: ApiSeasonUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Season/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SeasonUpdateDTOToJSON(requestParameters.seasonUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSeasonUpdatePut(requestParameters: ApiSeasonUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiSeasonUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
